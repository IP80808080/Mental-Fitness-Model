# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/114gF-nbToWI9_f10e0M7cMNwBI5JttGg

# Metal Fitness Tracker Model

# Import Lib
"""

import warnings
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd

file_path1 = '/content/data/pmas.csv'
file_path2 = '/content/data/mas.csv'

import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

df1 = pd.read_csv(file_path1)
df2 = pd.read_csv(file_path2)

df1.head()

data = pd.merge(df1,df2)

data.isnull().sum()

data.drop('Code', axis=1, inplace=True)

data.size, data.shape

data.set_axis(['Country','Year','Schizophrenia', 'Biploar_disorder', 'Eating_disorder', 'Anxiety','drug_usage','Depression', 'alcohol', 'mental_fitness'], axis='columns', inplace=True)

data.head(10)

"""# Visualization"""

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='Blues')
plt.plot()

sns.pairplot(data,corner=True)
plt.show()

mean = data['mental_fitness'].mean()
mean

fig = px.pie(data, values = 'mental_fitness', names='Year')
fig.show()

fig = px.line(data, x='Year', y="mental_fitness", color="Country", markers=True, color_discrete_sequence=['red','blue'], template='plotly_dark')
fig.show()

data.info()

from sklearn.preprocessing import LabelEncoder
l = LabelEncoder()
for i in data.columns:
    if data[i].dtype == 'object':
        data[i] = l.fit_transform(data[i])

data.shape

"""# Split Data"""

x = data.drop('mental_fitness', axis=1)
y = data['mental_fitness']
from  sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size=.20, random_state=2)

print("xtrain: ",xtrain.shape)
print("xtest: ", xtest.shape)
print("ytrain: ", ytrain.shape)
print("ytest: ", ytest.shape)

"""# Model Training"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
lr = LinearRegression()
lr.fit(xtrain, ytrain)

ytrain_pred = lr.predict(xtrain)

mse = mean_squared_error(ytrain, ytrain_pred)

rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))

r2 = r2_score(ytrain, ytrain_pred)

print("The Linear Regression Model performance for training set")
print("")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 is {}".format(r2))

from sklearn.ensemble import RandomForestRegressor
rf = RandomForestRegressor()
rf.fit(xtrain, ytrain)

ytrain_pred = rf.predict(xtrain)
mse = mean_squared_error(ytrain, ytrain_pred)
rmse = (np.sqrt(mean_squared_error(ytrain, ytrain_pred)))

r2 = r2_score(ytrain, ytrain_pred)

print("The Random Forest Regressor Model performance for training set")
print("")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 is {}".format(r2))

"""# Evaluation"""

ytest_pred = lr.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)

rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))

r2 = r2_score(ytest, ytest_pred)

print("The Linear Regression Model performance for training set")
print("")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 is {}".format(r2))

print("")
print("")

ytest_pred = rf.predict(xtest)
mse = mean_squared_error(ytest, ytest_pred)

rmse = (np.sqrt(mean_squared_error(ytest, ytest_pred)))

r2 = r2_score(ytest, ytest_pred)

print("The Random Forest Regressor Model performance for training set")
print("")
print("MSE is {}".format(mse))
print("RMSE is {}".format(rmse))
print("R2 is {}".format(r2))

